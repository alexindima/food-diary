// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           Int       @id @default(autoincrement())
    email        String    @unique
    password     String
    refreshToken String?
    username     String?
    firstName    String?
    lastName     String?
    birthDate    DateTime?
    gender       String?
    weight       Float?
    height       Float?
    profileImage String?
    isActive     Boolean   @default(true)
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt

    consumptions Consumption[]
    Food         Food[]
    Recipe       Recipe[]
}

model Food {
    id              Int        @id @default(autoincrement())
    barcode         String?
    name            String
    category        String?
    baseUnit        Unit
    baseAmount      Float
    caloriesPerBase Float
    proteinsPerBase Float
    fatsPerBase     Float
    carbsPerBase    Float
    usageCount      Int        @default(0)
    visibility      Visibility @default(PUBLIC)
    createdAt       DateTime   @default(now())
    updatedAt       DateTime   @updatedAt

    consumptionItems ConsumptionItem[]

    userId           Int
    user             User               @relation(fields: [userId], references: [id])
    RecipeIngredient RecipeIngredient[]
}

model Consumption {
    id        Int      @id @default(autoincrement())
    userId    Int
    date      DateTime @default(now())
    comment   String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user  User              @relation(fields: [userId], references: [id])
    items ConsumptionItem[]
}

model ConsumptionItem {
    id            Int      @id @default(autoincrement())
    consumptionId Int
    foodId        Int
    amount        Float
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    consumption Consumption @relation(fields: [consumptionId], references: [id])
    food        Food        @relation(fields: [foodId], references: [id])
}

model Recipe {
    id            Int      @id @default(autoincrement())
    name          String // Название рецепта
    description   String? // Краткое описание блюда
    category      String? // Категория рецепта (например, "Завтрак", "Обед")
    imageUrl      String? // Изображение готового блюда
    prepTime      Int? // Время подготовки (в минутах)
    cookTime      Int? // Время готовки (в минутах)
    servings      Int // Количество порций
    totalCalories Float? // Общие калории для рецепта
    totalProteins Float? // Общие белки
    totalFats     Float? // Общие жиры
    totalCarbs    Float? // Общие углеводы
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    userId Int
    user   User         @relation(fields: [userId], references: [id])
    steps  RecipeStep[] // Шаги приготовления
}

model RecipeStep {
    id          Int      @id @default(autoincrement())
    recipeId    Int
    stepNumber  Int // Номер шага
    description String // Описание шага
    imageUrl    String? // Изображение для шага (опционально)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    recipe      Recipe             @relation(fields: [recipeId], references: [id])
    ingredients RecipeIngredient[] // Ингредиенты шага
}

model RecipeIngredient {
    id        Int      @id @default(autoincrement())
    stepId    Int
    foodId    Int // Ссылка на продукт
    amount    Float // Количество продукта
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    step RecipeStep @relation(fields: [stepId], references: [id])
    food Food       @relation(fields: [foodId], references: [id])
}

enum Unit {
    G
    ML
    PCS
}

enum Visibility {
    PUBLIC // Продукт виден всем
    PRIVATE // Продукт виден только создателю
}
